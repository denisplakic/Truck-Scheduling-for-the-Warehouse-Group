train.Predict = predict(tree2, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 3 - No bias
parms = list(loss=matrix(c(0, 50, 50, 0), nrow=2))
tree3 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree3, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 4 - Bias against false positives
parms = list(loss=matrix(c(0, 25, 75, 0), nrow=2))
tree4 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree4, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 5 - No false positives
parms = list(loss=matrix(c(0, 0.1, 100, 0), nrow=2))
tree5 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree5, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
library(ggplot2)
SvS = tibble(Sensitivity = c(956/(956+0), 874/(874+82), 816/(816+140), 769/(769+187), 617/(617+339), 845/(845+12), 757/(757+100), 700/(700+157), 661/(661+196), 523/(523+334)), Specificity = c(775/(775+669), 1300/(1300+144), 1393/(1393+51), 1412/(1412+32), 1444/(1440+0), 717/(717+627), 1216/(1216+128), 1277/(1277+67), 1301/(1301+43), 1324/(1324+20)), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
SvS$InSample = as.factor(SvS$InSample)
g = ggplot(data=SvS,mapping=aes(x=Sensitivity,y=Specificity)) + geom_point(aes(col=InSample),size=1)
plot(g)
# Tree A - Depth of 3
treeA = rpart(IsSpam~., data=spam, subset=train, method='class', control = list(maxdepth = 3, minsplit = 1, cp = 0))
fancyRpartPlot(treeA)
train.Predict = predict(treeA, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree B - Depth of 6
treeB = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 6, minsplit = 1, cp = 0))
train.Predict = predict(treeB, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree C - Depth of 9
treeC = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 9, minsplit = 1, cp = 0))
train.Predict = predict(treeC, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree D - Depth of 12
treeD = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 12, minsplit = 1, cp = 0))
train.Predict = predict(treeD, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
AccuracyvDepth = tibble(Depth = c(3, 6, 9, 12, 3, 6, 9, 12), Accuracy = c((1364+803)/2400, (1394+834)/2400, (1403+849)/2400, (1402+863)/2400, (1244+702)/2400, (1271+709)/2400, (1274+716)/2400, (1273+731)/2400), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
AccuracyvDepth$InSample = as.factor(AccuracyvDepth$InSample)
g = ggplot(data=AccuracyvDepth,mapping=aes(x=Depth,y=Accuracy)) + geom_line(aes(col=InSample),size=1)
plot(g)
library(randomForest)
set.seed(80)
spam.rf = randomForest(IsSpam~., spam, ntree=1000)
spam.predict = predict(spam.rf, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
varImpPlot(spam.rf, cex = 0.75)
x = importance(spam.rf)
write.csv(x, "C:\\Users\\nicky\\OneDrive\\Desktop\\255\\Assignment 4\\Q2A.csv")
spam.rf2 = randomForest(IsSpam~A7+A16+A17+A21+A25+A28+A52+A55, spam, ntree=1000)
spam.predict = predict(spam.rf2, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
spam2 = read_csv("spamdata2")
library(tidyverse)
spam = read_csv('spamdata.csv')
spam$IsSpam = as.factor(spam$IsSpam)
set.seed(80)
train = sample(1:4601, 2400)
head(spam)
library(rpart)
library(rattle)
rpart.control(maxdepth = 10, minsplit = 1, cp = 0)
# Tree 1 - No false negatives
parms = list(loss=matrix(c(0, 100, 0.1, 0), nrow=2))
tree1 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree1, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 2 - Bias against false negatives
parms = list(loss=matrix(c(0, 75, 25, 0), nrow=2))
tree2 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree2, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 3 - No bias
parms = list(loss=matrix(c(0, 50, 50, 0), nrow=2))
tree3 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree3, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 4 - Bias against false positives
parms = list(loss=matrix(c(0, 25, 75, 0), nrow=2))
tree4 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree4, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 5 - No false positives
parms = list(loss=matrix(c(0, 0.1, 100, 0), nrow=2))
tree5 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree5, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
library(ggplot2)
SvS = tibble(Sensitivity = c(956/(956+0), 874/(874+82), 816/(816+140), 769/(769+187), 617/(617+339), 845/(845+12), 757/(757+100), 700/(700+157), 661/(661+196), 523/(523+334)), Specificity = c(775/(775+669), 1300/(1300+144), 1393/(1393+51), 1412/(1412+32), 1444/(1440+0), 717/(717+627), 1216/(1216+128), 1277/(1277+67), 1301/(1301+43), 1324/(1324+20)), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
SvS$InSample = as.factor(SvS$InSample)
g = ggplot(data=SvS,mapping=aes(x=Sensitivity,y=Specificity)) + geom_point(aes(col=InSample),size=1)
plot(g)
# Tree A - Depth of 3
treeA = rpart(IsSpam~., data=spam, subset=train, method='class', control = list(maxdepth = 3, minsplit = 1, cp = 0))
fancyRpartPlot(treeA)
train.Predict = predict(treeA, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree B - Depth of 6
treeB = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 6, minsplit = 1, cp = 0))
train.Predict = predict(treeB, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree C - Depth of 9
treeC = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 9, minsplit = 1, cp = 0))
train.Predict = predict(treeC, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree D - Depth of 12
treeD = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 12, minsplit = 1, cp = 0))
train.Predict = predict(treeD, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
AccuracyvDepth = tibble(Depth = c(3, 6, 9, 12, 3, 6, 9, 12), Accuracy = c((1364+803)/2400, (1394+834)/2400, (1403+849)/2400, (1402+863)/2400, (1244+702)/2400, (1271+709)/2400, (1274+716)/2400, (1273+731)/2400), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
AccuracyvDepth$InSample = as.factor(AccuracyvDepth$InSample)
g = ggplot(data=AccuracyvDepth,mapping=aes(x=Depth,y=Accuracy)) + geom_line(aes(col=InSample),size=1)
plot(g)
library(randomForest)
set.seed(80)
spam.rf = randomForest(IsSpam~., spam, ntree=1000)
spam.predict = predict(spam.rf, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
varImpPlot(spam.rf, cex = 0.75)
x = importance(spam.rf)
write.csv(x, "C:\\Users\\nicky\\OneDrive\\Desktop\\255\\Assignment 4\\Q2A.csv")
spam.rf2 = randomForest(IsSpam~A7+A16+A17+A21+A25+A28+A52+A55, spam, ntree=1000)
spam.predict = predict(spam.rf2, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
spam2 = read_csv("spamdata2")
spam2 = read_csv("spamdata2.csv")
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
spam2 = read_csv("spamdata2.csv")
library(tidyverse)
spam = read_csv('spamdata.csv')
spam$IsSpam = as.factor(spam$IsSpam)
set.seed(80)
train = sample(1:4601, 2400)
head(spam)
library(rpart)
library(rattle)
rpart.control(maxdepth = 10, minsplit = 1, cp = 0)
# Tree 1 - No false negatives
parms = list(loss=matrix(c(0, 100, 0.1, 0), nrow=2))
tree1 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree1, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 2 - Bias against false negatives
parms = list(loss=matrix(c(0, 75, 25, 0), nrow=2))
tree2 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree2, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 3 - No bias
parms = list(loss=matrix(c(0, 50, 50, 0), nrow=2))
tree3 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree3, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 4 - Bias against false positives
parms = list(loss=matrix(c(0, 25, 75, 0), nrow=2))
tree4 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree4, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 5 - No false positives
parms = list(loss=matrix(c(0, 0.1, 100, 0), nrow=2))
tree5 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree5, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
library(ggplot2)
SvS = tibble(Sensitivity = c(956/(956+0), 874/(874+82), 816/(816+140), 769/(769+187), 617/(617+339), 845/(845+12), 757/(757+100), 700/(700+157), 661/(661+196), 523/(523+334)), Specificity = c(775/(775+669), 1300/(1300+144), 1393/(1393+51), 1412/(1412+32), 1444/(1440+0), 717/(717+627), 1216/(1216+128), 1277/(1277+67), 1301/(1301+43), 1324/(1324+20)), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
SvS$InSample = as.factor(SvS$InSample)
g = ggplot(data=SvS,mapping=aes(x=Sensitivity,y=Specificity)) + geom_point(aes(col=InSample),size=1)
plot(g)
# Tree A - Depth of 3
treeA = rpart(IsSpam~., data=spam, subset=train, method='class', control = list(maxdepth = 3, minsplit = 1, cp = 0))
fancyRpartPlot(treeA)
train.Predict = predict(treeA, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree B - Depth of 6
treeB = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 6, minsplit = 1, cp = 0))
train.Predict = predict(treeB, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree C - Depth of 9
treeC = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 9, minsplit = 1, cp = 0))
train.Predict = predict(treeC, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree D - Depth of 12
treeD = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 12, minsplit = 1, cp = 0))
train.Predict = predict(treeD, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
AccuracyvDepth = tibble(Depth = c(3, 6, 9, 12, 3, 6, 9, 12), Accuracy = c((1364+803)/2400, (1394+834)/2400, (1403+849)/2400, (1402+863)/2400, (1244+702)/2400, (1271+709)/2400, (1274+716)/2400, (1273+731)/2400), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
AccuracyvDepth$InSample = as.factor(AccuracyvDepth$InSample)
g = ggplot(data=AccuracyvDepth,mapping=aes(x=Depth,y=Accuracy)) + geom_line(aes(col=InSample),size=1)
plot(g)
library(randomForest)
set.seed(80)
spam.rf = randomForest(IsSpam~., spam, ntree=1000)
spam.predict = predict(spam.rf, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
varImpPlot(spam.rf, cex = 0.75)
x = importance(spam.rf)
write.csv(x, "C:\\Users\\nicky\\OneDrive\\Desktop\\255\\Assignment 4\\Q2A.csv")
spam.rf2 = randomForest(IsSpam~A7+A16+A17+A21+A25+A28+A52+A55, spam, ntree=1000)
spam.predict = predict(spam.rf2, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
spam2 = read_csv("spamdata2.csv")
library(klaR)
spam2 = read_csv("spamdata2.csv")
library(klaR)
spam2 = read_csv("spamdata2.csv")
install.packages("klaR")
spam2 = read_csv("spamdata2.csv")
library(klaR)
spam2 = read_csv("spamdata2.csv")
library(klaR)
install.packages(c("broom", "callr", "cli", "clipr", "cpp11", "glue", "htmltools", "htmlwidgets", "jsonlite", "knitr", "openssl", "ps", "Rcpp", "readr", "rlang", "rmarkdown", "s20x", "sp", "stringi", "sys", "tibble", "tinytex", "withr", "xfun"))
spam2 = read_csv("spamdata2.csv")
library(klaR)
install.packages(c("glue", "htmltools", "jsonlite", "ps", "Rcpp", "readr", "rlang", "sp", "stringi", "tibble"))
install.packages(c("glue", "htmltools", "jsonlite", "ps", "Rcpp", "readr", "rlang", "sp", "stringi", "tibble"))
install.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
spam2 = read_csv("spamdata2.csv")
spam2 = read_csv("spamdata2.csv")
install.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
install.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
remove.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
remove.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
install.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
install.packages(c("glue", "htmltools", "ps", "Rcpp", "rlang", "sp", "stringi", "tibble"))
library(tidyverse)
spam = read_csv('spamdata.csv')
spam$IsSpam = as.factor(spam$IsSpam)
set.seed(80)
train = sample(1:4601, 2400)
head(spam)
library(rpart)
library(rattle)
rpart.control(maxdepth = 10, minsplit = 1, cp = 0)
# Tree 1 - No false negatives
parms = list(loss=matrix(c(0, 100, 0.1, 0), nrow=2))
tree1 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree1, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 2 - Bias against false negatives
parms = list(loss=matrix(c(0, 75, 25, 0), nrow=2))
tree2 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree2, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 3 - No bias
parms = list(loss=matrix(c(0, 50, 50, 0), nrow=2))
tree3 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree3, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 4 - Bias against false positives
parms = list(loss=matrix(c(0, 25, 75, 0), nrow=2))
tree4 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree4, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 5 - No false positives
parms = list(loss=matrix(c(0, 0.1, 100, 0), nrow=2))
tree5 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree5, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
library(ggplot2)
SvS = tibble(Sensitivity = c(956/(956+0), 874/(874+82), 816/(816+140), 769/(769+187), 617/(617+339), 845/(845+12), 757/(757+100), 700/(700+157), 661/(661+196), 523/(523+334)), Specificity = c(775/(775+669), 1300/(1300+144), 1393/(1393+51), 1412/(1412+32), 1444/(1440+0), 717/(717+627), 1216/(1216+128), 1277/(1277+67), 1301/(1301+43), 1324/(1324+20)), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
SvS$InSample = as.factor(SvS$InSample)
g = ggplot(data=SvS,mapping=aes(x=Sensitivity,y=Specificity)) + geom_point(aes(col=InSample),size=1)
plot(g)
# Tree A - Depth of 3
treeA = rpart(IsSpam~., data=spam, subset=train, method='class', control = list(maxdepth = 3, minsplit = 1, cp = 0))
fancyRpartPlot(treeA)
train.Predict = predict(treeA, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree B - Depth of 6
treeB = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 6, minsplit = 1, cp = 0))
train.Predict = predict(treeB, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree C - Depth of 9
treeC = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 9, minsplit = 1, cp = 0))
train.Predict = predict(treeC, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree D - Depth of 12
treeD = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 12, minsplit = 1, cp = 0))
train.Predict = predict(treeD, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
AccuracyvDepth = tibble(Depth = c(3, 6, 9, 12, 3, 6, 9, 12), Accuracy = c((1364+803)/2400, (1394+834)/2400, (1403+849)/2400, (1402+863)/2400, (1244+702)/2400, (1271+709)/2400, (1274+716)/2400, (1273+731)/2400), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
AccuracyvDepth$InSample = as.factor(AccuracyvDepth$InSample)
g = ggplot(data=AccuracyvDepth,mapping=aes(x=Depth,y=Accuracy)) + geom_line(aes(col=InSample),size=1)
plot(g)
library(randomForest)
set.seed(80)
spam.rf = randomForest(IsSpam~., spam, ntree=1000)
spam.predict = predict(spam.rf, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
varImpPlot(spam.rf, cex = 0.75)
x = importance(spam.rf)
write.csv(x, "C:\\Users\\nicky\\OneDrive\\Desktop\\255\\Assignment 4\\Q2A.csv")
spam.rf2 = randomForest(IsSpam~A7+A16+A17+A21+A25+A28+A52+A55, spam, ntree=1000)
spam.predict = predict(spam.rf2, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
spam2 = read_csv("spamdata2.csv")
library(klaR)
spam2 = read_csv("spamdata2.csv")
library(klaR)
head(spam2)
#spam.nb = NaiveBayes(IsSpam~)
spam2 = read_csv("spamdata2.csv")
library(klaR)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
spam2 = read_csv("spamdata2.csv")
library(klaR)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
spam2 = read_csv("spamdata2.csv")
spam2 = as.factor(spam2)
library(klaR)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
spam2 = read_csv("spamdata2.csv")
spam2[] = as.factor(spam2[])
spam2 = read_csv("spamdata2.csv")
library(klaR)
head(spam2)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
spam2 = read_csv("spamdata2.csv")
spam2$IsSpam = as.factor(spam2$IsSpam)
library(klaR)
head(spam2)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
predictions = predict(spam.nb, spam2)
head(predictions)
spam2 = read_csv("spamdata2.csv")
spam2$IsSpam = as.factor(spam2$IsSpam)
library(klaR)
head(spam2)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
predictions = predict(spam.nb, spam2)$class
table(Actual = spam2$IsSpam, Prediction = prediction)
spam2 = read_csv("spamdata2.csv")
spam2$IsSpam = as.factor(spam2$IsSpam)
library(klaR)
head(spam2)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
prediction = predict(spam.nb, spam2)$class
table(Actual = spam2$IsSpam, Prediction = prediction)
spam2 = read_csv("spamdata2.csv")
spam2$IsSpam = as.factor(spam2$IsSpam)
library(klaR)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
prediction = predict(spam.nb, spam2)$class
table(Actual = spam2$IsSpam, Prediction = prediction)
library(tidyverse)
spam = read_csv('spamdata.csv')
spam$IsSpam = as.factor(spam$IsSpam)
set.seed(80)
train = sample(1:4601, 2400)
head(spam)
library(rpart)
library(rattle)
rpart.control(maxdepth = 10, minsplit = 1, cp = 0)
# Tree 1 - No false negatives
parms = list(loss=matrix(c(0, 100, 0.1, 0), nrow=2))
tree1 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree1, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 2 - Bias against false negatives
parms = list(loss=matrix(c(0, 75, 25, 0), nrow=2))
tree2 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree2, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 3 - No bias
parms = list(loss=matrix(c(0, 50, 50, 0), nrow=2))
tree3 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree3, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 4 - Bias against false positives
parms = list(loss=matrix(c(0, 25, 75, 0), nrow=2))
tree4 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree4, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree 5 - No false positives
parms = list(loss=matrix(c(0, 0.1, 100, 0), nrow=2))
tree5 = rpart(IsSpam~.,data=spam,subset=train,method='class',parms=parms)
train.Predict = predict(tree5, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
library(ggplot2)
SvS = tibble(Sensitivity = c(956/(956+0), 874/(874+82), 816/(816+140), 769/(769+187), 617/(617+339), 845/(845+12), 757/(757+100), 700/(700+157), 661/(661+196), 523/(523+334)), Specificity = c(775/(775+669), 1300/(1300+144), 1393/(1393+51), 1412/(1412+32), 1444/(1440+0), 717/(717+627), 1216/(1216+128), 1277/(1277+67), 1301/(1301+43), 1324/(1324+20)), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
SvS$InSample = as.factor(SvS$InSample)
g = ggplot(data=SvS,mapping=aes(x=Sensitivity,y=Specificity)) + geom_point(aes(col=InSample),size=1)
plot(g)
# Tree A - Depth of 3
treeA = rpart(IsSpam~., data=spam, subset=train, method='class', control = list(maxdepth = 3, minsplit = 1, cp = 0))
fancyRpartPlot(treeA)
train.Predict = predict(treeA, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree B - Depth of 6
treeB = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 6, minsplit = 1, cp = 0))
train.Predict = predict(treeB, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree C - Depth of 9
treeC = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 9, minsplit = 1, cp = 0))
train.Predict = predict(treeC, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Tree D - Depth of 12
treeD = rpart(IsSpam~.,data=spam,subset=train,method='class', control = list(maxdepth = 12, minsplit = 1, cp = 0))
train.Predict = predict(treeD, spam, type="class")
table(IsSpam = spam[train,]$IsSpam, Prediction = train.Predict[train])
table(IsSpam = spam[-train,]$IsSpam, Prediction = train.Predict[-train])
# Generating a scatter plot of senstivity versus specificity of trees
AccuracyvDepth = tibble(Depth = c(3, 6, 9, 12, 3, 6, 9, 12), Accuracy = c((1364+803)/2400, (1394+834)/2400, (1403+849)/2400, (1402+863)/2400, (1244+702)/2400, (1271+709)/2400, (1274+716)/2400, (1273+731)/2400), InSample = c("In-Sample", "In-Sample", "In-Sample", "In-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample", "Out-of-Sample"))
AccuracyvDepth$InSample = as.factor(AccuracyvDepth$InSample)
g = ggplot(data=AccuracyvDepth,mapping=aes(x=Depth,y=Accuracy)) + geom_line(aes(col=InSample),size=1)
plot(g)
library(randomForest)
set.seed(80)
spam.rf = randomForest(IsSpam~., spam, ntree=1000)
spam.predict = predict(spam.rf, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
varImpPlot(spam.rf, cex = 0.75)
x = importance(spam.rf)
write.csv(x, "C:\\Users\\nicky\\OneDrive\\Desktop\\255\\Assignment 4\\Q2A.csv")
spam.rf2 = randomForest(IsSpam~A7+A16+A17+A21+A25+A28+A52+A55, spam, ntree=1000)
spam.predict = predict(spam.rf2, spam, type="response")
table(Actual = spam$IsSpam, Prediction = spam.predict)
spam2 = read_csv("spamdata2.csv")
spam2$IsSpam = as.factor(spam2$IsSpam)
library(klaR)
spam.nb = NaiveBayes(IsSpam~A1+A3+A5+A7, data=spam2)
prediction = predict(spam.nb, spam2)$class
table(Actual = spam2$IsSpam, Prediction = prediction)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
setwd("C:/Users/nicky/OneDrive/Desktop/263/OR/master")
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
source('C:/Users/nicky/OneDrive/Desktop/263/OR/master/Estimate_Demand.R', echo=TRUE)
